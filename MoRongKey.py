# import binascii

# def ListByte_to_Hex(listByte):
#     hexString = binascii.hexlify(b''.join(listByte)).decode('utf-8')
#     return hexString

def ListHex_To_Str(hex_list):
    string = ' '.join([x[2:] for x in hex_list])
    return string

def HexList_To_Text(hex_list):
    string = ''.join([x[2:] for x in hex_list])
    return string

def CheckLenFour(hex_list):
    hex_list_check = []
    for i in hex_list:
        if len(list(i)) == 3:
            k = '0x0' + list(i)[2]
            hex_list_check.append(k)
        else:
            hex_list_check.append(i)
    
    return hex_list_check

def FixHexLen( hex, len_value):
    hex_list = list(hex)

    if (len(hex_list) > len_value + 2):
        print("\n", "-----------> Bug len list: ", hex_list, "\n")
        return

    while( len(hex_list) < len_value + 2 ):
        hex_list.insert(2,'0')


    hex_new = ''
    for i in hex_list:
        hex_new += i

    return  hex_new
def Rot_Left_1_Byte(listByte):
    posNew = [ 1, 2, 3, 0 ]
    
    return [ listByte[i] for i in posNew ]

def Sub_Bytes(hex_list):
    S_BOX = [
    [0x63, 0x7C, 0x77, 0x7B, 0xF2, 0x6B, 0x6F, 0xC5, 0x30, 0x01, 0x67, 0x2B, 0xFE, 0xD7, 0xAB, 0x76],
    [0xCA, 0x82, 0xC9, 0x7D, 0xFA, 0x59, 0x47, 0xF0, 0xAD, 0xD4, 0xA2, 0xAF, 0x9C, 0xA4, 0x72, 0xC0],
    [0xB7, 0xFD, 0x93, 0x26, 0x36, 0x3F, 0xF7, 0xCC, 0x34, 0xA5, 0xE5, 0xF1, 0x71, 0xD8, 0x31, 0x15],
    [0x04, 0xC7, 0x23, 0xC3, 0x18, 0x96, 0x05, 0x9A, 0x07, 0x12, 0x80, 0xE2, 0xEB, 0x27, 0xB2, 0x75],
    [0x09, 0x83, 0x2C, 0x1A, 0x1B, 0x6E, 0x5A, 0xA0, 0x52, 0x3B, 0xD6, 0xB3, 0x29, 0xE3, 0x2F, 0x84],
    [0x53, 0xD1, 0x00, 0xED, 0x20, 0xFC, 0xB1, 0x5B, 0x6A, 0xCB, 0xBE, 0x39, 0x4A, 0x4C, 0x58, 0xCF],
    [0xD0, 0xEF, 0xAA, 0xFB, 0x43, 0x4D, 0x33, 0x85, 0x45, 0xF9, 0x02, 0x7F, 0x50, 0x3C, 0x9F, 0xA8],
    [0x51, 0xA3, 0x40, 0x8F, 0x92, 0x9D, 0x38, 0xF5, 0xBC, 0xB6, 0xDA, 0x21, 0x10, 0xFF, 0xF3, 0xD2],
    [0xCD, 0x0C, 0x13, 0xEC, 0x5F, 0x97, 0x44, 0x17, 0xC4, 0xA7, 0x7E, 0x3D, 0x64, 0x5D, 0x19, 0x73],
    [0x60, 0x81, 0x4F, 0xDC, 0x22, 0x2A, 0x90, 0x88, 0x46, 0xEE, 0xB8, 0x14, 0xDE, 0x5E, 0x0B, 0xDB],
    [0xE0, 0x32, 0x3A, 0x0A, 0x49, 0x06, 0x24, 0x5C, 0xC2, 0xD3, 0xAC, 0x62, 0x91, 0x95, 0xE4, 0x79],
    [0xE7, 0xC8, 0x37, 0x6D, 0x8D, 0xD5, 0x4E, 0xA9, 0x6C, 0x56, 0xF4, 0xEA, 0x65, 0x7A, 0xAE, 0x08],
    [0xBA, 0x78, 0x25, 0x2E, 0x1C, 0xA6, 0xB4, 0xC6, 0xE8, 0xDD, 0x74, 0x1F, 0x4B, 0xBD, 0x8B, 0x8A],
    [0x70, 0x3E, 0xB5, 0x66, 0x48, 0x03, 0xF6, 0x0E, 0x61, 0x35, 0x57, 0xB9, 0x86, 0xC1, 0x1D, 0x9E],
    [0xE1, 0xF8, 0x98, 0x11, 0x69, 0xD9, 0x8E, 0x94, 0x9B, 0x1E, 0x87, 0xE9, 0xCE, 0x55, 0x28, 0xDF],
    [0x8C, 0xA1, 0x89, 0x0D, 0xBF, 0xE6, 0x42, 0x68, 0x41, 0x99, 0x2D, 0x0F, 0xB0, 0x54, 0xBB, 0x16]
        ]
    
    hex_list_sub = []

    for i in hex_list:
        row = list(i)[2]
        col = list(i)[3]

        row = int(row, 16)
        col = int(col, 16)

        hex_list_sub.append( hex(S_BOX[row][col]) )
        #print("S Box: ", row ,"--", col ," : ", S_BOX[row][col])

    hex_list_sub = CheckLenFour(hex_list_sub)
    
    return hex_list_sub 

R_con = [
    [0x01, 0x00, 0x00, 0x00],
    [0x02, 0x00, 0x00, 0x00],
    [0x04, 0x00, 0x00, 0x00],
    [0x08, 0x00, 0x00, 0x00],
    [0x10, 0x00, 0x00, 0x00],
    [0x20, 0x00, 0x00, 0x00],
    [0x40, 0x00, 0x00, 0x00],
    [0x80, 0x00, 0x00, 0x00],
    [0x1B, 0x00, 0x00, 0x00],
    [0x36, 0x00, 0x00, 0x00]
    ]

def Phep_XOR(hex_list_1, hex_list_2):
    # Phép XOR sử dụng vòng lặp
    result_list = [hex(int(x, 16) ^ int(y, 16)) for x, y in zip(hex_list_1, hex_list_2)]

    result_list = CheckLenFour(result_list)

    # In kết quả
    return result_list

def Ham_G(w, index):

    w_RotLeft = Rot_Left_1_Byte(w)
    w_RotLeft = CheckLenFour(w_RotLeft)
    #print("--> Rot Left : ", ListHex_To_Str(w_RotLeft), " --- ", w_RotLeft) 

    w_Sub = Sub_Bytes(w_RotLeft)
    #print("--> Sub Byte : ",w_Sub, "---" , ListHex_To_Str(w_Sub) )

    
    w_Rcon = Phep_XOR( w_Sub, [ hex(i) for i in R_con[index]] )
    #print("--> Phep X_OR : ", w_Rcon, "---", ListHex_To_Str(w_Rcon) )


    return w_Rcon

def Text_To_HexList(text):
    hex_list = [hex(int(text[i:i+2], 16)) for i in range(0, len(text), 2)]

    hex_list = CheckLenFour(hex_list)

    return hex_list

def MoRongKhoa(key):
    #byte_key =  [bytes.fromhex(key[i:i+2]) for i in range(0, len(key), 2)]
    #hex_key = [hex(int(key[i:i+2], 16)) for i in range(0, len(key), 2)]
    hex_key = Text_To_HexList(key)
    # print(hex_key, "---", len(hex_key))

    matrix_hex_key = []

    w_0 = hex_key[0:4]
    w_1 = hex_key[4:8]
    w_2 = hex_key[8:12]
    w_3 = hex_key[12:16]

    for i in range(10):
        w_3_HamG = Ham_G( w_3, i )
        w_0 = Phep_XOR( w_0, w_3_HamG )
        w_1 = Phep_XOR( w_1, w_0 )
        w_2 = Phep_XOR( w_2, w_1 )
        w_3 = Phep_XOR( w_2, w_3 ) 
        
        key_con = w_0 + w_1 + w_2 + w_3

        matrix_hex_key.append( key_con )
    #     print(" key con: ", i , "  : ", ListHex_To_Str(key_con) , "\n",
    #             "  w_", 4*(i+1) + 0, " : " , ListHex_To_Str(w_0), " --- ",w_0, "\n",
    #             "  w_", 4*(i+1) + 1, " : " , ListHex_To_Str(w_1), " --- ",w_1, "\n",
    #             "  w_", 4*(i+1) + 2, " : " , ListHex_To_Str(w_2), " --- ",w_2, "\n",
    #             "  w_", 4*(i+1) + 3, " : " , ListHex_To_Str(w_3), " --- ",w_3 )
        
    # print("\n", matrix_hex_key)
    return matrix_hex_key


#key = "EAD27321B58DBAD2312BF5607F8D292F"
key = "2B7E151628AED2A6ABF7158809CF4F3C"
MoRongKhoa(key)